<?php

/**
 * ProcessWire Dimension Fieldtype
 * by "Soma" Philipp Urlich
 *
 * Field that stores 3 integer values for width/height/depth.
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeDimension extends Fieldtype {

    protected $defaults = array(
        'defaultValue' => 0
        );


    public static function getModuleInfo() {
        return array(
            'title' => __('Dimension Fieldtype', __FILE__), // Module Title
            'summary' => __('Field that stores 3 integer values for width/height/depth.', __FILE__), // Module Summary
            'version' => 100,
            'installs' => 'InputfieldDimension'
        );
    }

    public function __construct() {
        parent::__construct();
    }

    /**
     * Format value for output
     *
     */
    public function ___formatValue(Page $page, Field $field, $value) {
        return $value;
    }

    /**
     *
     * Add mapping to different name for use in page selectors
     * This enables to use it like "field.width=100, field.height<=200, field.depth>100"
     */
    public function getMatchQuery($query, $table, $subfield, $operator, $value) {
        if($subfield == 'width') $subfield = 'data';
        if($subfield == 'height') $subfield = 'data_height';
        if($subfield == 'depth') $subfield = 'data_depth';
        return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
    }

    /**
     * get Inputfield for this fieldtype, set config attributes so they can be used in the inputfield
     *
     */
    public function getInputfield(Page $page, Field $field) {
        $dim = $this->modules->get('InputfieldDimension');

        $dim->set('width', $field->width ? $field->width : $this->defaults['defaultValue']);
        $dim->set('height', $field->height ? $field->height : $this->defaults['defaultValue']);
        $dim->set('depth', $field->depth ? $field->depth : $this->defaults['defaultValue']);
        $dim->set('inputwidth', $field->inputwidth ? $field->inputwidth : '100');

        return $dim;
    }

    /**
     * there's none compatible
     *
     */
    public function ___getCompatibleFieldtypes(Field $field) {
        return null;
    }

    /**
     * blank value is an WireData object Dimension
     *
     */
    public function getBlankValue(Page $page, Field $field) {
        return new Dimension();
    }

    /**
     * Any value will get sanitized before setting it to a page object
     * and before saving the data
     *
     * If value not of instance Dimension return empty instance
     */
    public function sanitizeValue(Page $page, Field $field, $value) {

        if(!$value instanceof Dimension) $value = $this->getBlankValue($page, $field);

        // report any changes to the field values
        if($value->isChanged('width')
            || $value->isChanged('height')
            || $value->isChanged('depth')) $page->trackChange($field->name);

        return $value;
    }

    /**
     * get values converted when fetched from db
     *
     */
    public function ___wakeupValue(Page $page, Field $field, $value) {

        // get blank dim
        $dim = $this->getBlankValue($page, $field);
        // populate the dim
        $dim->width = $value['data'];
        $dim->height = $value['data_height'];
        $dim->depth = $value['data_depth'];

        return $dim;
    }

    /**
     * return converted from object to array
     *
     */
    public function ___sleepValue(Page $page, Field $field, $value) {

        $dim = $value;

        // throw error if value is not of the right type
        if(!$dim instanceof Dimension)
            throw new WireException("Expecting an instance of Dimension");

        $sleepValue = array(
            'data' => $dim->width,
            'data_height' => $dim->height,
            'data_depth' => $dim->depth
            );

        return $sleepValue;
    }


    public function getDatabaseSchema(Field $field) {

        $schema = parent::getDatabaseSchema($field);
        $schema['data'] = 'int NOT NULL default 0';
        $schema['data_height'] = 'int NOT NULL default 0';
        $schema['data_depth'] = 'int NOT NULL default 0';
        $schema['keys']['data_dim'] = 'KEY data_dim(data, data_height, data_depth)';
        return $schema;
    }

    public function ___getConfigInputfields(Field $field) {
        $inputfields = parent::___getConfigInputfields($field);

        $f = $this->modules->get('InputfieldInteger');
        $f->setAttribute('name', 'inputwidth');
        $f->label = 'Input width';
        $f->setAttribute('value', $field->inputwidth ? $field->inputwidth : '100' );
        $f->setAttribute('size', 10);
        $f->description = 'Width of the inputs in pixels.';
        $inputfields->append($f);

        return $inputfields;
    }

}


/**
 * Class to hold dimension object
 *
 */
class Dimension extends WireData {

    public function __construct() {
        $this->set('width', '');
        $this->set('height', '');
        $this->set('depth', '');
    }

    public function set($key, $value) {

        if($key == 'width' || $key == 'height' || $key == 'depth') {
            // if value isn't numeric, then it's not valid: make it blank
            if(!is_numeric($value)) $value = '';
        }
        return parent::set($key, $value);
    }

    public function get($key) {
        return parent::get($key);
    }


}
